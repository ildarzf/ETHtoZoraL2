import json
from web3 import Web3
import decimal
import random
import time
from tqdm import tqdm
from loguru import logger

def sleep_indicator(sec):
    for i in tqdm(range(sec), desc='Пауза', bar_format="{desc}: {n_fmt}c /{total_fmt}c {bar}", colour='green'):
        time.sleep(1)

def wallet():
    with open('wallets.txt', 'r') as f:
        wallets = f.read().splitlines()
        return wallets

def intToDecimal(qty, decimal):
    return int(qty * int("".join(["1"] + ["0"] * decimal)))



########################### ИЗМЕНЯЕМЫЕ ПАРАМЕТРЫ ##############################################################################
tokenID = random.randint(1, 7) # ИД НФТ который надо минтит Минтим НФТ стандарта 1155

Quant = 1   # количество  одинаковых НФТ минтить на один кошелек
DEP_FROM = 0.00251# от в ETH
DEP_TO = 0.00301 # до в ETH
sleep_min = 60  # Спим между кошельками
sleep_max = 140
sleep_action_min = 10   # Спим между действиями
sleep_action_max = 25
time_to_conf = 360 #ожидание подтверждения транзакций
Gwei = 30  # если газ выше уходим в ожидание
depos_if = 0.001 # Депозитить если в сети Zora меньше этого значения в ETH иначе переходим к минту
rpc_zora = "https://rpc.zora.co/"   # Нода Зора
rpc_eth = "https://rpc.ankr.com/eth"    # Нода Эфира
shuffle = True      # False / True Перемешивать кошельки или нет
mint_nft = True     # False / True Минтить НФТ  или нет
low_gas_zora = True # False / True Если не работает на низком газе поставить False или повысить значение в строчке 80

############################################################################################################################


def wait_dep(private_key):
    web3 = Web3(Web3.HTTPProvider(rpc_zora))
    account = web3.eth.account.from_key(private_key).address
    while True:
        balance_gas = web3.eth.get_balance(account)
        if web3.from_wei(balance_gas, "ether") > 0:
            logger.success(f'Депозит поступил {web3.from_wei(balance_gas, "ether")}')
            break
        else:
            logger.info(f'Ждем поступления средств. Сплю 30 секунд')
            sleep_indicator(30)
    return balance_gas

def mintnft(private_key):
    web3 = Web3(Web3.HTTPProvider(rpc_zora))
    mint_abi ='[ {  "inputs": [{ "internalType": "uint256", "name": "_mintFeeAmount", "type": "uint256"},{ "internalType": "address", "name": "_mintFeeRecipient", "type": "address"},{ "internalType": "address", "name": "_factory", "type": "address"}  ],  "stateMutability": "nonpayable",  "type": "constructor" }, {  "inputs": [],  "name": "ADDRESS_DELEGATECALL_TO_NON_CONTRACT",  "type": "error" }, {  "inputs": [],  "name": "ADDRESS_LOW_LEVEL_CALL_FAILED",  "type": "error" }, {  "inputs": [{ "internalType": "address", "name": "operator", "type": "address"},{ "internalType": "address", "name": "user", "type": "address"}  ],  "name": "Burn_NotOwnerOrApproved",  "type": "error" }, {  "inputs": [{ "internalType": "bytes", "name": "reason", "type": "bytes"}  ],  "name": "CallFailed",  "type": "error" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "uint256", "name": "quantity", "type": "uint256"},{ "internalType": "uint256", "name": "totalMinted", "type": "uint256"},{ "internalType": "uint256", "name": "maxSupply", "type": "uint256"}  ],  "name": "CannotMintMoreTokens",  "type": "error" }, {  "inputs": [{ "internalType": "address", "name": "mintFeeRecipient", "type": "address"},{ "internalType": "uint256", "name": "mintFee", "type": "uint256"}  ],  "name": "CannotSendMintFee",  "type": "error" }, {  "inputs": [],  "name": "CannotSetMintFeeToZeroAddress",  "type": "error" }, {  "inputs": [{ "internalType": "address", "name": "proposedAddress", "type": "address"}  ],  "name": "Config_TransferHookNotSupported",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_ACCOUNTS_AND_IDS_LENGTH_MISMATCH",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_ADDRESS_ZERO_IS_NOT_A_VALID_OWNER",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_BURN_AMOUNT_EXCEEDS_BALANCE",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_BURN_FROM_ZERO_ADDRESS",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_CALLER_IS_NOT_TOKEN_OWNER_OR_APPROVED",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_ERC1155RECEIVER_REJECTED_TOKENS",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_IDS_AND_AMOUNTS_LENGTH_MISMATCH",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_INSUFFICIENT_BALANCE_FOR_TRANSFER",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_MINT_TO_ZERO_ADDRESS",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_SETTING_APPROVAL_FOR_SELF",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_TRANSFER_TO_NON_ERC1155RECEIVER_IMPLEMENTER",  "type": "error" }, {  "inputs": [],  "name": "ERC1155_TRANSFER_TO_ZERO_ADDRESS",  "type": "error" }, {  "inputs": [],  "name": "ERC1967_NEW_IMPL_NOT_CONTRACT",  "type": "error" }, {  "inputs": [],  "name": "ERC1967_NEW_IMPL_NOT_UUPS",  "type": "error" }, {  "inputs": [],  "name": "ERC1967_UNSUPPORTED_PROXIABLEUUID",  "type": "error" }, {  "inputs": [{ "internalType": "address", "name": "recipient", "type": "address"},{ "internalType": "uint256", "name": "amount", "type": "uint256"}  ],  "name": "ETHWithdrawFailed",  "type": "error" }, {  "inputs": [],  "name": "FUNCTION_MUST_BE_CALLED_THROUGH_ACTIVE_PROXY",  "type": "error" }, {  "inputs": [],  "name": "FUNCTION_MUST_BE_CALLED_THROUGH_DELEGATECALL",  "type": "error" }, {  "inputs": [{ "internalType": "uint256", "name": "amount", "type": "uint256"},{ "internalType": "uint256", "name": "contractValue", "type": "uint256"}  ],  "name": "FundsWithdrawInsolvent",  "type": "error" }, {  "inputs": [],  "name": "INITIALIZABLE_CONTRACT_ALREADY_INITIALIZED",  "type": "error" }, {  "inputs": [],  "name": "INITIALIZABLE_CONTRACT_IS_NOT_INITIALIZING",  "type": "error" }, {  "inputs": [],  "name": "InvalidMintSchedule",  "type": "error" }, {  "inputs": [{ "internalType": "uint256", "name": "mintFeeBPS", "type": "uint256"}  ],  "name": "MintFeeCannotBeMoreThanZeroPointOneETH",  "type": "error" }, {  "inputs": [],  "name": "Mint_InsolventSaleTransfer",  "type": "error" }, {  "inputs": [],  "name": "Mint_TokenIDMintNotAllowed",  "type": "error" }, {  "inputs": [],  "name": "Mint_UnknownCommand",  "type": "error" }, {  "inputs": [],  "name": "Mint_ValueTransferFail",  "type": "error" }, {  "inputs": [],  "name": "NewOwnerNeedsToBeAdmin",  "type": "error" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"}  ],  "name": "NoRendererForToken",  "type": "error" }, {  "inputs": [{ "internalType": "address", "name": "renderer", "type": "address"}  ],  "name": "RendererNotValid",  "type": "error" }, {  "inputs": [],  "name": "Renderer_NotValidRendererContract",  "type": "error" }, {  "inputs": [{ "internalType": "address", "name": "targetContract", "type": "address"}  ],  "name": "Sale_CannotCallNonSalesContract",  "type": "error" }, {  "inputs": [{ "internalType": "uint256", "name": "expected", "type": "uint256"},{ "internalType": "uint256", "name": "actual", "type": "uint256"}  ],  "name": "TokenIdMismatch",  "type": "error" }, {  "inputs": [],  "name": "UUPS_UPGRADEABLE_MUST_NOT_BE_CALLED_THROUGH_DELEGATECALL",  "type": "error" }, {  "inputs": [{ "internalType": "address", "name": "user", "type": "address"},{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "uint256", "name": "role", "type": "uint256"}  ],  "name": "UserMissingRoleForToken",  "type": "error" }, {  "anonymous": false,  "inputs": [{ "indexed": false, "internalType": "address", "name": "previousAdmin", "type": "address"},{ "indexed": false, "internalType": "address", "name": "newAdmin", "type": "address"}  ],  "name": "AdminChanged",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "address", "name": "account", "type": "address"},{ "indexed": true, "internalType": "address", "name": "operator", "type": "address"},{ "indexed": false, "internalType": "bool", "name": "approved", "type": "bool"}  ],  "name": "ApprovalForAll",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "address", "name": "beacon", "type": "address"}  ],  "name": "BeaconUpgraded",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "address", "name": "updater", "type": "address"},{ "indexed": true, "internalType": "enum IZoraCreator1155.ConfigUpdate", "name": "updateType", "type": "uint8"},{ "components": [  {"internalType": "address","name": "owner","type": "address"  },  {"internalType": "uint96","name": "__gap1","type": "uint96"  },  {"internalType": "address payable","name": "fundsRecipient","type": "address"  },  {"internalType": "uint96","name": "__gap2","type": "uint96"  },  {"internalType": "contract ITransferHookReceiver","name": "transferHook","type": "address"  },  {"internalType": "uint96","name": "__gap3","type": "uint96"  } ], "indexed": false, "internalType": "struct IZoraCreator1155TypesV1.ContractConfig", "name": "newConfig", "type": "tuple"}  ],  "name": "ConfigUpdated",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "address", "name": "updater", "type": "address"},{ "indexed": false, "internalType": "string", "name": "uri", "type": "string"},{ "indexed": false, "internalType": "string", "name": "name", "type": "string"}  ],  "name": "ContractMetadataUpdated",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": false, "internalType": "contract IRenderer1155", "name": "renderer", "type": "address"}  ],  "name": "ContractRendererUpdated",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": false, "internalType": "uint8", "name": "version", "type": "uint8"}  ],  "name": "Initialized",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": false, "internalType": "address", "name": "lastOwner", "type": "address"},{ "indexed": false, "internalType": "address", "name": "newOwner", "type": "address"}  ],  "name": "OwnershipTransferred",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "address", "name": "sender", "type": "address"},{ "indexed": true, "internalType": "address", "name": "minter", "type": "address"},{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "indexed": false, "internalType": "uint256", "name": "quantity", "type": "uint256"},{ "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256"}  ],  "name": "Purchased",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "indexed": true, "internalType": "address", "name": "renderer", "type": "address"},{ "indexed": true, "internalType": "address", "name": "user", "type": "address"}  ],  "name": "RendererUpdated",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "indexed": true, "internalType": "address", "name": "sender", "type": "address"},{ "indexed": false, "internalType": "string", "name": "newURI", "type": "string"},{ "indexed": false, "internalType": "uint256", "name": "maxSupply", "type": "uint256"}  ],  "name": "SetupNewToken",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "address", "name": "operator", "type": "address"},{ "indexed": true, "internalType": "address", "name": "from", "type": "address"},{ "indexed": true, "internalType": "address", "name": "to", "type": "address"},{ "indexed": false, "internalType": "uint256[]", "name": "ids", "type": "uint256[]"},{ "indexed": false, "internalType": "uint256[]", "name": "values", "type": "uint256[]"}  ],  "name": "TransferBatch",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "address", "name": "operator", "type": "address"},{ "indexed": true, "internalType": "address", "name": "from", "type": "address"},{ "indexed": true, "internalType": "address", "name": "to", "type": "address"},{ "indexed": false, "internalType": "uint256", "name": "id", "type": "uint256"},{ "indexed": false, "internalType": "uint256", "name": "value", "type": "uint256"}  ],  "name": "TransferSingle",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": false, "internalType": "string", "name": "value", "type": "string"},{ "indexed": true, "internalType": "uint256", "name": "id", "type": "uint256"}  ],  "name": "URI",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "indexed": true, "internalType": "address", "name": "user", "type": "address"},{ "indexed": true, "internalType": "uint256", "name": "permissions", "type": "uint256"}  ],  "name": "UpdatedPermissions",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "indexed": true, "internalType": "address", "name": "user", "type": "address"},{ "components": [  {"internalType": "uint32","name": "royaltyMintSchedule","type": "uint32"  },  {"internalType": "uint32","name": "royaltyBPS","type": "uint32"  },  {"internalType": "address","name": "royaltyRecipient","type": "address"  } ], "indexed": false, "internalType": "struct ICreatorRoyaltiesControl.RoyaltyConfiguration", "name": "configuration", "type": "tuple"}  ],  "name": "UpdatedRoyalties",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address"},{ "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "components": [  {"internalType": "string","name": "uri","type": "string"  },  {"internalType": "uint256","name": "maxSupply","type": "uint256"  },  {"internalType": "uint256","name": "totalMinted","type": "uint256"  } ], "indexed": false, "internalType": "struct IZoraCreator1155TypesV1.TokenData", "name": "tokenData", "type": "tuple"}  ],  "name": "UpdatedToken",  "type": "event" }, {  "anonymous": false,  "inputs": [{ "indexed": true, "internalType": "address", "name": "implementation", "type": "address"}  ],  "name": "Upgraded",  "type": "event" }, {  "inputs": [],  "name": "CONTRACT_BASE_ID",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "PERMISSION_BIT_ADMIN",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "PERMISSION_BIT_FUNDS_MANAGER",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "PERMISSION_BIT_METADATA",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "PERMISSION_BIT_MINTER",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "PERMISSION_BIT_SALES",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "address", "name": "user", "type": "address"},{ "internalType": "uint256", "name": "permissionBits", "type": "uint256"}  ],  "name": "addPermission",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "recipient", "type": "address"},{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "uint256", "name": "quantity", "type": "uint256"},{ "internalType": "bytes", "name": "data", "type": "bytes"}  ],  "name": "adminMint",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "recipient", "type": "address"},{ "internalType": "uint256[]", "name": "tokenIds", "type": "uint256[]"},{ "internalType": "uint256[]", "name": "quantities", "type": "uint256[]"},{ "internalType": "bytes", "name": "data", "type": "bytes"}  ],  "name": "adminMintBatch",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "lastTokenId", "type": "uint256"}  ],  "name": "assumeLastTokenIdMatches",  "outputs": [],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "account", "type": "address"},{ "internalType": "uint256", "name": "id", "type": "uint256"}  ],  "name": "balanceOf",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "address[]", "name": "accounts", "type": "address[]"},{ "internalType": "uint256[]", "name": "ids", "type": "uint256[]"}  ],  "name": "balanceOfBatch",  "outputs": [{ "internalType": "uint256[]", "name": "batchBalances", "type": "uint256[]"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "from", "type": "address"},{ "internalType": "uint256[]", "name": "tokenIds", "type": "uint256[]"},{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]"}  ],  "name": "burnBatch",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "bytes", "name": "data", "type": "bytes"}  ],  "name": "callRenderer",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "contract IMinter1155", "name": "salesConfig", "type": "address"},{ "internalType": "bytes", "name": "data", "type": "bytes"}  ],  "name": "callSale",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [],  "name": "config",  "outputs": [{ "internalType": "address", "name": "owner", "type": "address"},{ "internalType": "uint96", "name": "__gap1", "type": "uint96"},{ "internalType": "address payable", "name": "fundsRecipient", "type": "address"},{ "internalType": "uint96", "name": "__gap2", "type": "uint96"},{ "internalType": "contract ITransferHookReceiver", "name": "transferHook", "type": "address"},{ "internalType": "uint96", "name": "__gap3", "type": "uint96"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "contractURI",  "outputs": [{ "internalType": "string", "name": "", "type": "string"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "contractVersion",  "outputs": [{ "internalType": "string", "name": "", "type": "string"}  ],  "stateMutability": "pure",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "name": "customRenderers",  "outputs": [{ "internalType": "contract IRenderer1155", "name": "", "type": "address"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"}  ],  "name": "getCustomRenderer",  "outputs": [{ "internalType": "contract IRenderer1155", "name": "customRenderer", "type": "address"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "address", "name": "user", "type": "address"}  ],  "name": "getPermissions",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"}  ],  "name": "getRoyalties",  "outputs": [{ "components": [  {"internalType": "uint32","name": "royaltyMintSchedule","type": "uint32"  },  {"internalType": "uint32","name": "royaltyBPS","type": "uint32"  },  {"internalType": "address","name": "royaltyRecipient","type": "address"  } ], "internalType": "struct ICreatorRoyaltiesControl.RoyaltyConfiguration", "name": "", "type": "tuple"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"}  ],  "name": "getTokenInfo",  "outputs": [{ "components": [  {"internalType": "string","name": "uri","type": "string"  },  {"internalType": "uint256","name": "maxSupply","type": "uint256"  },  {"internalType": "uint256","name": "totalMinted","type": "uint256"  } ], "internalType": "struct IZoraCreator1155TypesV1.TokenData", "name": "", "type": "tuple"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "string", "name": "contractName", "type": "string"},{ "internalType": "string", "name": "newContractURI", "type": "string"},{ "components": [  {"internalType": "uint32","name": "royaltyMintSchedule","type": "uint32"  },  {"internalType": "uint32","name": "royaltyBPS","type": "uint32"  },  {"internalType": "address","name": "royaltyRecipient","type": "address"  } ], "internalType": "struct ICreatorRoyaltiesControl.RoyaltyConfiguration", "name": "defaultRoyaltyConfiguration", "type": "tuple"},{ "internalType": "address payable", "name": "defaultAdmin", "type": "address"},{ "internalType": "bytes[]", "name": "setupActions", "type": "bytes[]"}  ],  "name": "initialize",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "user", "type": "address"},{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "uint256", "name": "role", "type": "uint256"}  ],  "name": "isAdminOrRole",  "outputs": [{ "internalType": "bool", "name": "", "type": "bool"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "account", "type": "address"},{ "internalType": "address", "name": "operator", "type": "address"}  ],  "name": "isApprovedForAll",  "outputs": [{ "internalType": "bool", "name": "", "type": "bool"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "name": "metadataRendererContract",  "outputs": [{ "internalType": "address", "name": "", "type": "address"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "contract IMinter1155", "name": "minter", "type": "address"},{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "uint256", "name": "quantity", "type": "uint256"},{ "internalType": "bytes", "name": "minterArguments", "type": "bytes"}  ],  "name": "mint",  "outputs": [],  "stateMutability": "payable",  "type": "function" }, {  "inputs": [],  "name": "mintFee",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "mintFeeRecipient",  "outputs": [{ "internalType": "address", "name": "", "type": "address"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "bytes[]", "name": "data", "type": "bytes[]"}  ],  "name": "multicall",  "outputs": [{ "internalType": "bytes[]", "name": "results", "type": "bytes[]"}  ],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [],  "name": "name",  "outputs": [{ "internalType": "string", "name": "", "type": "string"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "nextTokenId",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "owner",  "outputs": [{ "internalType": "address", "name": "", "type": "address"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256"},{ "internalType": "address", "name": "", "type": "address"}  ],  "name": "permissions",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "proxiableUUID",  "outputs": [{ "internalType": "bytes32", "name": "", "type": "bytes32"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "address", "name": "user", "type": "address"},{ "internalType": "uint256", "name": "permissionBits", "type": "uint256"}  ],  "name": "removePermission",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "name": "royalties",  "outputs": [{ "internalType": "uint32", "name": "royaltyMintSchedule", "type": "uint32"},{ "internalType": "uint32", "name": "royaltyBPS", "type": "uint32"},{ "internalType": "address", "name": "royaltyRecipient", "type": "address"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "uint256", "name": "salePrice", "type": "uint256"}  ],  "name": "royaltyInfo",  "outputs": [{ "internalType": "address", "name": "receiver", "type": "address"},{ "internalType": "uint256", "name": "royaltyAmount", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "from", "type": "address"},{ "internalType": "address", "name": "to", "type": "address"},{ "internalType": "uint256[]", "name": "ids", "type": "uint256[]"},{ "internalType": "uint256[]", "name": "amounts", "type": "uint256[]"},{ "internalType": "bytes", "name": "data", "type": "bytes"}  ],  "name": "safeBatchTransferFrom",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "from", "type": "address"},{ "internalType": "address", "name": "to", "type": "address"},{ "internalType": "uint256", "name": "id", "type": "uint256"},{ "internalType": "uint256", "name": "amount", "type": "uint256"},{ "internalType": "bytes", "name": "data", "type": "bytes"}  ],  "name": "safeTransferFrom",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "operator", "type": "address"},{ "internalType": "bool", "name": "approved", "type": "bool"}  ],  "name": "setApprovalForAll",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "address payable", "name": "fundsRecipient", "type": "address"}  ],  "name": "setFundsRecipient",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address"}  ],  "name": "setOwner",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "contract IRenderer1155", "name": "renderer", "type": "address"}  ],  "name": "setTokenMetadataRenderer",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "contract ITransferHookReceiver", "name": "transferHook", "type": "address"}  ],  "name": "setTransferHook",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "string", "name": "newURI", "type": "string"},{ "internalType": "uint256", "name": "maxSupply", "type": "uint256"}  ],  "name": "setupNewToken",  "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256"}  ],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "uint256", "name": "totalSupply", "type": "uint256"},{ "internalType": "uint256", "name": "mintAmount", "type": "uint256"}  ],  "name": "supplyRoyaltyInfo",  "outputs": [{ "internalType": "address", "name": "receiver", "type": "address"},{ "internalType": "uint256", "name": "royaltyAmount", "type": "uint256"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4"}  ],  "name": "supportsInterface",  "outputs": [{ "internalType": "bool", "name": "", "type": "bool"}  ],  "stateMutability": "view",  "type": "function" }, {  "inputs": [],  "name": "symbol",  "outputs": [{ "internalType": "string", "name": "", "type": "string"}  ],  "stateMutability": "pure",  "type": "function" }, {  "inputs": [{ "internalType": "string", "name": "_newURI", "type": "string"},{ "internalType": "string", "name": "_newName", "type": "string"}  ],  "name": "updateContractMetadata",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "components": [  {"internalType": "uint32","name": "royaltyMintSchedule","type": "uint32"  },  {"internalType": "uint32","name": "royaltyBPS","type": "uint32"  },  {"internalType": "address","name": "royaltyRecipient","type": "address"  } ], "internalType": "struct ICreatorRoyaltiesControl.RoyaltyConfiguration", "name": "newConfiguration", "type": "tuple"}  ],  "name": "updateRoyaltiesForToken",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"},{ "internalType": "string", "name": "_newURI", "type": "string"}  ],  "name": "updateTokenURI",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "newImplementation", "type": "address"}  ],  "name": "upgradeTo",  "outputs": [],  "stateMutability": "nonpayable",  "type": "function" }, {  "inputs": [{ "internalType": "address", "name": "newImplementation", "type": "address"},{ "internalType": "bytes", "name": "data", "type": "bytes"}  ],  "name": "upgradeToAndCall",  "outputs": [],  "stateMutability": "payable",  "type": "function" }, {  "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256"}  ],  "name": "uri",  "outputs": [{ "internalType": "string", "name": "", "type": "string"}  ],  "stateMutability": "view",  "type": "function" }, {"inputs": [],"name": "withdraw","outputs": [],"stateMutability": "nonpayable","type": "function"}]'
    minter = web3.to_checksum_address('0x4c0c2DD31d2661E8BCeC60a42e803dCc6F81Baad') # контракт base mint NFT
    minting = web3.eth.contract(address=minter, abi=mint_abi)
    zora_minter = web3.to_checksum_address('0x169d9147dfc9409afa4e558df2c9abeebc020182')
    zora_minter_abi = '[{"inputs": [],"name": "SaleEnded","type": "error"},{"inputs": [],"name": "SaleHasNotStarted","type": "error"},{"inputs": [{"internalType": "address","name": "user","type": "address"},{"internalType": "uint256","name": "limit","type": "uint256"},{"internalType": "uint256","name": "requestedAmount","type": "uint256"}],"name": "UserExceedsMintLimit","type": "error"},{"inputs": [],"name": "WrongValueSent","type": "error"},{"anonymous": false,"inputs": [{"indexed": true,"internalType": "address","name": "sender","type": "address"},{"indexed": true,"internalType": "address","name": "tokenContract","type": "address"},{"indexed": true,"internalType": "uint256","name": "tokenId","type": "uint256"},{"indexed": false,"internalType": "uint256","name": "quantity","type": "uint256"},{"indexed": false,"internalType": "string","name": "comment","type": "string"}],"name": "MintComment","type": "event"},{"anonymous": false,"inputs": [{"indexed": true,"internalType": "address","name": "mediaContract","type": "address"},{"indexed": true,"internalType": "uint256","name": "tokenId","type": "uint256"},{"components": [{"internalType": "uint64","name": "saleStart","type": "uint64"},{"internalType": "uint64","name": "saleEnd","type": "uint64"},{"internalType": "uint64","name": "maxTokensPerAddress","type": "uint64"},{"internalType": "uint96","name": "pricePerToken","type": "uint96"},{"internalType": "address","name": "fundsRecipient","type": "address"}],"indexed": false,"internalType": "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig","name": "salesConfig","type": "tuple"}],"name": "SaleSet","type": "event"},{"inputs": [],"name": "contractName","outputs": [{"internalType": "string","name": "","type": "string"}],"stateMutability": "pure","type": "function"},{"inputs": [],"name": "contractURI","outputs": [{"internalType": "string","name": "","type": "string"}],"stateMutability": "pure","type": "function"},{"inputs": [],"name": "contractVersion","outputs": [{"internalType": "string","name": "","type": "string"}],"stateMutability": "pure","type": "function"},{"inputs": [{"internalType": "address","name": "tokenContract","type": "address"},{"internalType": "uint256","name": "tokenId","type": "uint256"},{"internalType": "address","name": "wallet","type": "address"}],"name": "getMintedPerWallet","outputs": [{"internalType": "uint256","name": "","type": "uint256"}],"stateMutability": "view","type": "function"},{"inputs": [{"internalType": "address","name": "","type": "address"},{"internalType": "uint256","name": "tokenId","type": "uint256"},{"internalType": "uint256","name": "quantity","type": "uint256"},{"internalType": "uint256","name": "ethValueSent","type": "uint256"},{"internalType": "bytes","name": "minterArguments","type": "bytes"}],"name": "requestMint","outputs": [{"components": [{"components": [{"internalType": "enum ICreatorCommands.CreatorActions","name": "method","type": "uint8"},{"internalType": "bytes","name": "args","type": "bytes"}],"internalType": "struct ICreatorCommands.Command[]","name": "commands","type": "tuple[]"},{"internalType": "uint256","name": "at","type": "uint256"}],"internalType": "struct ICreatorCommands.CommandSet","name": "commands","type": "tuple"}],"stateMutability": "nonpayable","type": "function"},{"inputs": [{"internalType": "uint256","name": "tokenId","type": "uint256"}],"name": "resetSale","outputs": [],"stateMutability": "nonpayable","type": "function"},{"inputs": [{"internalType": "address","name": "tokenContract","type": "address"},{"internalType": "uint256","name": "tokenId","type": "uint256"}],"name": "sale","outputs": [{"components": [{"internalType": "uint64","name": "saleStart","type": "uint64"},{"internalType": "uint64","name": "saleEnd","type": "uint64"},{"internalType": "uint64","name": "maxTokensPerAddress","type": "uint64"},{"internalType": "uint96","name": "pricePerToken","type": "uint96"},{"internalType": "address","name": "fundsRecipient","type": "address"}],"internalType": "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig","name": "","type": "tuple"}],"stateMutability": "view","type": "function"},{"inputs": [{"internalType": "uint256","name": "tokenId","type": "uint256"},{"components": [{"internalType": "uint64","name": "saleStart","type": "uint64"},{"internalType": "uint64","name": "saleEnd","type": "uint64"},{"internalType": "uint64","name": "maxTokensPerAddress","type": "uint64"},{"internalType": "uint96","name": "pricePerToken","type": "uint96"},{"internalType": "address","name": "fundsRecipient","type": "address"}],"internalType": "struct ZoraCreatorFixedPriceSaleStrategy.SalesConfig","name": "salesConfig","type": "tuple"}],"name": "setSale","outputs": [],"stateMutability": "nonpayable","type": "function"},{"inputs": [{"internalType": "bytes4","name": "interfaceId","type": "bytes4"}],"name": "supportsInterface","outputs": [{"internalType": "bool","name": "","type": "bool"}],"stateMutability": "pure","type": "function"}]'
    zora_mint_cont = web3.eth.contract(address=zora_minter, abi=zora_minter_abi)
    address = web3.eth.account.from_key(private_key).address
    gasLimit = random.randint(160000, 180000)

    _minter = web3.to_checksum_address('0x169d9147dfc9409afa4e558df2c9abeebc020182')
    _tokenId = tokenID
    _quantity = Quant

    sale_data = zora_mint_cont.functions.sale(minter, _tokenId).call() #цена нфт

    price = sale_data[3]

    value = (minting.functions.mintFee().call() + price) # цена минта + цена НФТ

    address_edited = address.rpartition('x')[2]
    _minterArguments = '0x000000000000000000000000' + address_edited
    if low_gas_zora:
        gas_price = random.randint(50000000, 60000000) # Заниженный Газ
    else:
        gas_price = web3.eth.gas_price
    try:
        tx = minting.functions.mint(_minter, _tokenId, _quantity, _minterArguments
         ).build_transaction({
          'from': address,
          'value': value,
          'gas': gasLimit,
          'gasPrice': gas_price,
          'nonce': web3.eth.get_transaction_count(address)
          })
        signed_tx = web3.eth.account.sign_transaction(tx, private_key)
        tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
        logger.info(f'Mint NFT: Transaction hash: https://explorer.zora.energy/tx/{tx_hash.hex()}')
        logger.info('Жду подтверждение...')
        tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash, timeout=time_to_conf)
        logger.success('Отправил')
    except Exception as err:
        logger.error(f'  Ошибка.   {err}')

def deposit(private_key):
    web3 = Web3(Web3.HTTPProvider(rpc_eth))
    bridge_abi ='[{"inputs":[{"internalType":"contract L2OutputOracle","name":"_l2Oracle","type":"address"},{"internalType":"address","name":"_guardian","type":"address"},{"internalType":"bool","name":"_paused","type":"bool"},{"internalType":"contract SystemConfig","name":"_config","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"version","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"opaqueData","type":"bytes"}],"name":"TransactionDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"withdrawalHash","type":"bytes32"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"}],"name":"WithdrawalFinalized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"withdrawalHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"}],"name":"WithdrawalProven","type":"event"},{"inputs":[],"name":"GUARDIAN","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"L2_ORACLE","outputs":[{"internalType":"contract L2OutputOracle","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SYSTEM_CONFIG","outputs":[{"internalType":"contract SystemConfig","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_value","type":"uint256"},{"internalType":"uint64","name":"_gasLimit","type":"uint64"},{"internalType":"bool","name":"_isCreation","type":"bool"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"depositTransaction","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"donateETH","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Types.WithdrawalTransaction","name":"_tx","type":"tuple"}],"name":"finalizeWithdrawalTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"finalizedWithdrawals","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bool","name":"_paused","type":"bool"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_l2OutputIndex","type":"uint256"}],"name":"isOutputFinalized","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"l2Sender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint64","name":"_byteCount","type":"uint64"}],"name":"minimumGasLimit","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"params","outputs":[{"internalType":"uint128","name":"prevBaseFee","type":"uint128"},{"internalType":"uint64","name":"prevBoughtGas","type":"uint64"},{"internalType":"uint64","name":"prevBlockNum","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"gasLimit","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Types.WithdrawalTransaction","name":"_tx","type":"tuple"},{"internalType":"uint256","name":"_l2OutputIndex","type":"uint256"},{"components":[{"internalType":"bytes32","name":"version","type":"bytes32"},{"internalType":"bytes32","name":"stateRoot","type":"bytes32"},{"internalType":"bytes32","name":"messagePasserStorageRoot","type":"bytes32"},{"internalType":"bytes32","name":"latestBlockhash","type":"bytes32"}],"internalType":"struct Types.OutputRootProof","name":"_outputRootProof","type":"tuple"},{"internalType":"bytes[]","name":"_withdrawalProof","type":"bytes[]"}],"name":"proveWithdrawalTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"provenWithdrawals","outputs":[{"internalType":"bytes32","name":"outputRoot","type":"bytes32"},{"internalType":"uint128","name":"timestamp","type":"uint128"},{"internalType":"uint128","name":"l2OutputIndex","type":"uint128"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"stateMutability":"payable","type":"receive"}]'
    ZoraBridge = web3.to_checksum_address('0x1a0ad011913A150f69f6A19DF447A0CfD9551054') # contract ZORA deposit
    bridge = web3.eth.contract(address=ZoraBridge, abi=bridge_abi)
    num = 0
    if True:
            num = num+1
            account = web3.eth.account.from_key(private_key).address
            gas_price = web3.eth.gas_price
            amount_to_transfer = round(random.uniform(DEP_FROM, DEP_TO), 5)
            _value = intToDecimal(amount_to_transfer, 18)
            _to = account
            _gasLimit = 100000
            _isCreation = False
            data_k = ''
            _data = bytes(data_k, 'ascii')
            gasLimit = web3.eth.estimate_gas(
                {'to': Web3.to_checksum_address(account), 'from': Web3.to_checksum_address(account),
                 'value': web3.to_wei(0.0001, 'ether')}) + random.randint(10000, 30000)
            tx = bridge.functions.depositTransaction(_to, _value, _gasLimit, _isCreation, _data
                ).build_transaction({
                'value': _value,
                'from': account,
                'gas': int(gasLimit*3),
                'gasPrice': int(gas_price),
                'nonce': web3.eth.get_transaction_count(account),
                })
            signed_tx = web3.eth.account.sign_transaction(tx, private_key)
            tx_hash = web3.eth.send_raw_transaction(signed_tx.rawTransaction)
            account = web3.eth.account.from_key(private_key).address
            logger.info(f'- Депозит  {account}')
            logger.info(f'Transaction hash: https://etherscan.io/tx/{tx_hash.hex()}')
            logger.info('Жду подтверждение...')
            tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash, timeout=time_to_conf)
            logger.success('Отправил')



def minter():
    with open('wallets.txt', 'r') as f:
        wallets = f.read().splitlines()
    if shuffle:
        random.shuffle(wallets)
    num = 0
    for private_key in wallets:
        try:
            num= num+1
            web3 = Web3(Web3.HTTPProvider(rpc_zora))
            account = web3.eth.account.from_key(private_key).address
            logger.info(f'{num}  -  {account}')
            balance_gas = web3.eth.get_balance(account)
            web3 = Web3(Web3.HTTPProvider(rpc_eth))
            while True:
                current_gas_price = web3.eth.gas_price
                current_gas_price_gwei = web3.from_wei(current_gas_price, 'gwei')
                if round(current_gas_price_gwei, 1) <= Gwei:
                    if web3.from_wei(balance_gas, "ether") <= depos_if:
                       deposit(private_key)  # Депозит в Зора
                       if mint_nft:
                            wait_dep(private_key)  # Ждем поступления
                    else:
                        logger.info(f'На счету  {web3.from_wei(balance_gas, "ether")}  ETH')
                        if mint_nft == False:
                            deposit(private_key)
                    break
                else:
                    logger.info(f'GWEI {round(current_gas_price_gwei, 1)}  Ждем Gwei ниже {Gwei}. Сплю 30 секунд')
                    sleep_indicator(30)
            sleep_indicator(random.randint(sleep_action_min, sleep_action_max))
            if mint_nft:
                mintnft(private_key)  # Минт
        except Exception as err:
            logger.error(f'{err}')
        time_wait_wal = random.randint(sleep_min, sleep_max)
        sleep_indicator(time_wait_wal)  # задержка между кошельками
if __name__ == '__main__':
    minter()
